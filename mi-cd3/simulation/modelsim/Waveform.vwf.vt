// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/07/2024 16:41:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sistemaRega
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistemaRega_vlg_vec_tst();
// constants                                           
// general purpose registers
reg H;
reg L;
reg M;
reg T;
reg Ua;
reg Us;
reg clock;
// wires                                               
wire Ag;
wire Al;
wire Bs;
wire E;
wire Ve;
wire Vs;
wire [4:0] column;
wire led;
wire [6:0] lines;
wire segA;
wire segB;
wire segC;
wire segD;
wire segE;
wire segF;
wire segG;
wire [3:0] seven_seg_digit;
wire working;

// assign statements (if any)                          
sistemaRega i1 (
// port map - connection between master ports and signals/registers   
	.Ag(Ag),
	.Al(Al),
	.Bs(Bs),
	.E(E),
	.H(H),
	.L(L),
	.M(M),
	.T(T),
	.Ua(Ua),
	.Us(Us),
	.Ve(Ve),
	.Vs(Vs),
	.clock(clock),
	.column(column),
	.led(led),
	.lines(lines),
	.segA(segA),
	.segB(segB),
	.segC(segC),
	.segD(segD),
	.segE(segE),
	.segF(segF),
	.segG(segG),
	.seven_seg_digit(seven_seg_digit),
	.working(working)
);
initial 
begin 
#1000000 $stop;
end 

// H
initial
begin
	H = 1'b1;
	H = #50000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #20000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #20000 1'b1;
	H = #20000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #20000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #40000 1'b1;
	H = #30000 1'b0;
	H = #20000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #20000 1'b1;
	H = #20000 1'b0;
	H = #20000 1'b1;
	H = #20000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #50000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #20000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #10000 1'b1;
	H = #40000 1'b0;
	H = #20000 1'b1;
	H = #60000 1'b0;
	H = #10000 1'b1;
	H = #10000 1'b0;
	H = #20000 1'b1;
	H = #30000 1'b0;
	H = #40000 1'b1;
	H = #30000 1'b0;
end 

// L
initial
begin
	L = 1'b1;
	L = #50000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #20000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #20000 1'b1;
	L = #20000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #20000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #40000 1'b1;
	L = #30000 1'b0;
	L = #20000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #20000 1'b1;
	L = #20000 1'b0;
	L = #20000 1'b1;
	L = #20000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #50000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #20000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #10000 1'b1;
	L = #40000 1'b0;
	L = #20000 1'b1;
	L = #60000 1'b0;
	L = #10000 1'b1;
	L = #10000 1'b0;
	L = #20000 1'b1;
	L = #30000 1'b0;
	L = #40000 1'b1;
	L = #30000 1'b0;
end 

// M
initial
begin
	M = 1'b0;
	M = #10000 1'b1;
	M = #10000 1'b0;
	M = #30000 1'b1;
	M = #20000 1'b0;
	M = #30000 1'b1;
	M = #30000 1'b0;
	M = #50000 1'b1;
	M = #80000 1'b0;
	M = #10000 1'b1;
	M = #10000 1'b0;
	M = #50000 1'b1;
	M = #20000 1'b0;
	M = #10000 1'b1;
	M = #30000 1'b0;
	M = #10000 1'b1;
	M = #10000 1'b0;
	M = #20000 1'b1;
	M = #20000 1'b0;
	M = #30000 1'b1;
	M = #10000 1'b0;
	M = #20000 1'b1;
	M = #20000 1'b0;
	M = #10000 1'b1;
	M = #10000 1'b0;
	M = #20000 1'b1;
	M = #10000 1'b0;
	M = #70000 1'b1;
	M = #30000 1'b0;
	M = #10000 1'b1;
	M = #20000 1'b0;
	M = #20000 1'b1;
	M = #10000 1'b0;
	M = #10000 1'b1;
	M = #30000 1'b0;
	M = #10000 1'b1;
	M = #20000 1'b0;
	M = #10000 1'b1;
	M = #30000 1'b0;
	M = #20000 1'b1;
	M = #10000 1'b0;
	M = #20000 1'b1;
	M = #10000 1'b0;
	M = #10000 1'b1;
	M = #20000 1'b0;
	M = #20000 1'b1;
	M = #20000 1'b0;
end 

// T
initial
begin
	T = 1'b0;
	T = #10000 1'b1;
	T = #10000 1'b0;
	T = #30000 1'b1;
	T = #20000 1'b0;
	T = #30000 1'b1;
	T = #30000 1'b0;
	T = #50000 1'b1;
	T = #80000 1'b0;
	T = #10000 1'b1;
	T = #10000 1'b0;
	T = #50000 1'b1;
	T = #20000 1'b0;
	T = #10000 1'b1;
	T = #30000 1'b0;
	T = #10000 1'b1;
	T = #10000 1'b0;
	T = #20000 1'b1;
	T = #20000 1'b0;
	T = #30000 1'b1;
	T = #10000 1'b0;
	T = #20000 1'b1;
	T = #20000 1'b0;
	T = #10000 1'b1;
	T = #10000 1'b0;
	T = #20000 1'b1;
	T = #10000 1'b0;
	T = #70000 1'b1;
	T = #30000 1'b0;
	T = #10000 1'b1;
	T = #20000 1'b0;
	T = #20000 1'b1;
	T = #10000 1'b0;
	T = #10000 1'b1;
	T = #30000 1'b0;
	T = #10000 1'b1;
	T = #20000 1'b0;
	T = #10000 1'b1;
	T = #30000 1'b0;
	T = #20000 1'b1;
	T = #10000 1'b0;
	T = #20000 1'b1;
	T = #10000 1'b0;
	T = #10000 1'b1;
	T = #20000 1'b0;
	T = #20000 1'b1;
	T = #20000 1'b0;
end 

// Ua
initial
begin
	Ua = 1'b0;
	Ua = #10000 1'b1;
	Ua = #10000 1'b0;
	Ua = #30000 1'b1;
	Ua = #20000 1'b0;
	Ua = #30000 1'b1;
	Ua = #30000 1'b0;
	Ua = #50000 1'b1;
	Ua = #80000 1'b0;
	Ua = #10000 1'b1;
	Ua = #10000 1'b0;
	Ua = #50000 1'b1;
	Ua = #20000 1'b0;
	Ua = #10000 1'b1;
	Ua = #30000 1'b0;
	Ua = #10000 1'b1;
	Ua = #10000 1'b0;
	Ua = #20000 1'b1;
	Ua = #20000 1'b0;
	Ua = #30000 1'b1;
	Ua = #10000 1'b0;
	Ua = #20000 1'b1;
	Ua = #20000 1'b0;
	Ua = #10000 1'b1;
	Ua = #10000 1'b0;
	Ua = #20000 1'b1;
	Ua = #10000 1'b0;
	Ua = #70000 1'b1;
	Ua = #30000 1'b0;
	Ua = #10000 1'b1;
	Ua = #20000 1'b0;
	Ua = #20000 1'b1;
	Ua = #10000 1'b0;
	Ua = #10000 1'b1;
	Ua = #30000 1'b0;
	Ua = #10000 1'b1;
	Ua = #20000 1'b0;
	Ua = #10000 1'b1;
	Ua = #30000 1'b0;
	Ua = #20000 1'b1;
	Ua = #10000 1'b0;
	Ua = #20000 1'b1;
	Ua = #10000 1'b0;
	Ua = #10000 1'b1;
	Ua = #20000 1'b0;
	Ua = #20000 1'b1;
	Ua = #20000 1'b0;
end 

// Us
initial
begin
	Us = 1'b0;
	Us = #10000 1'b1;
	Us = #10000 1'b0;
	Us = #30000 1'b1;
	Us = #20000 1'b0;
	Us = #30000 1'b1;
	Us = #30000 1'b0;
	Us = #50000 1'b1;
	Us = #80000 1'b0;
	Us = #10000 1'b1;
	Us = #10000 1'b0;
	Us = #50000 1'b1;
	Us = #20000 1'b0;
	Us = #10000 1'b1;
	Us = #30000 1'b0;
	Us = #10000 1'b1;
	Us = #10000 1'b0;
	Us = #20000 1'b1;
	Us = #20000 1'b0;
	Us = #30000 1'b1;
	Us = #10000 1'b0;
	Us = #20000 1'b1;
	Us = #20000 1'b0;
	Us = #10000 1'b1;
	Us = #10000 1'b0;
	Us = #20000 1'b1;
	Us = #10000 1'b0;
	Us = #70000 1'b1;
	Us = #30000 1'b0;
	Us = #10000 1'b1;
	Us = #20000 1'b0;
	Us = #20000 1'b1;
	Us = #10000 1'b0;
	Us = #10000 1'b1;
	Us = #30000 1'b0;
	Us = #10000 1'b1;
	Us = #20000 1'b0;
	Us = #10000 1'b1;
	Us = #30000 1'b0;
	Us = #20000 1'b1;
	Us = #10000 1'b0;
	Us = #20000 1'b1;
	Us = #10000 1'b0;
	Us = #10000 1'b1;
	Us = #20000 1'b0;
	Us = #20000 1'b1;
	Us = #20000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
endmodule

